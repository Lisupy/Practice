
"====Ex1.9"
;Exercise 1.9.  Each of the following two procedures defines a method for adding two positive integers in terms of the procedures inc, which increments its argument by 1, and dec, which decrements its argument by 1.

;(define (+ a b)
(define (+-recursive a b)  
  (if (= a 0)
      b
      (inc (+ (dec a) b))))

(define (+-iterative a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))

;Using the substitution model, illustrate the process generated by each procedure in evaluating (+ 4 5). Are these processes iterative or recursive?
"有推迟进行的运算，是区分“递归计算过程”和“迭代计算过程”的关键"
"第一个“加法过程+”，由于最后一个inc是“推迟进行的运算”，所以是“递归计算过程”"
"http://www.cppblog.com/cuigang/archive/2008/03/11/44213.html"
"(+ 4 5)
(if (= 4 0) 5 (inc (+ (dec 4) 5)))
(inc (+ 3 5))
(inc (if (= 3 0) 5 (inc (+ 2 5))))
(inc (inc (if (= 2 0) 5 (inc (+ 1 5)))))
(inc (inc (inc (if (= 1 0) 5 (inc (+ 0 5))))))
(inc (inc (inc (inc (if (= 0 0) 5 (inc (+ (dec 0) 5)))))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9

(+ 4 5)
(if (= 4 0) 5 (+ 3 6))
(if (= 3 0) 6 (+ 2 7))
(if (= 2 0) 7 (+ 1 8))
(if (= 1 0) 8 (+ 0 9))
(if (= 0 0) 9 (+ (dec 0) (inc 9)))
9"

"====Ex1.10"
;Exercise 1.10.  The following procedure computes a mathematical function called Ackermann's function.

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

;What are the values of the following expressions?

(A 1 10)

(A 2 4)

(A 3 3)

;Consider the following procedures, where A is the procedure defined above:

(define (f n) (A 0 n)) ; f(n) = 2*n

(define (g n) (A 1 n)) ;g(n) = f(g(n-1))= 2*g(n-1) = 2^n

(define (h n) (A 2 n)) ; h(n) = g(h(n-1)) = 2^(h(n-1))

(define (k n) (* 5 n n)); k(n) = 5 * n * n = 5n^2

;Give concise mathematical definitions for the functions computed by the procedures f, g, and h for positive integer values of n. For example, (k n) computes 5n^2.
(define (testEx fun begin end)
  (display begin)
  (display " ")
  (display (fun begin))
  (display "\n")
  (if (>= begin end) (display "")
      (testEx fun (+ begin 1) end)))
"test f"
(testEx f 0 10)
"test g"
(testEx g 0 10)
"test h"
(testEx h 0 5)

