(define nil ())
(define (enumerate-interval low high)
  (if (> low high)
      nil
      (cons low (enumerate-interval (+ low 1) high))))
(enumerate-interval 1 10)
(map (lambda (i) (list i 10)) (enumerate-interval 1 10))
(define (accumulate op init seqs)
  (if (null? seqs)
      init
      (op (car seqs) (accumulate op init (cdr seqs)))))

(define (prime? n)
  (null? (filter (lambda (x) (= (remainder n x) 0)) (enumerate-interval 2 (- n 1)))))
;(prime? 6)
(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))
"====Ex2.40"
(define (unique-pairs n)
  (accumulate append nil
  (map (lambda (j) (map (lambda (i) (list i j)) (enumerate-interval 1 (- j 1)))) (enumerate-interval 1 n))))

;(unique-pairs 10)
(define (prime-sum-pairs? n)
  (filter (lambda (l) (prime? (+ (car l) (cadr l)))) (unique-pairs n)))
(prime-sum-pairs? 10)
"====Ex2.41"
(define (unique-triples n)
  (flatmap (lambda (pair) 
             (map (lambda (x) (cons x pair)) 
                      (enumerate-interval 1 (- (car pair) 1)))) 
           (unique-pairs n)))
(unique-triples 10)
(define (unique-triples-sum-s n s)
  (filter (lambda (triple) (= (+ (car triple) (cadr triple) (caddr triple)) s)) (unique-triples n)))
(unique-triples-sum-s 10 10)

"====Ex2.42"
(define (queens board-size)
  
  (define empty-board ())
  (define (adjoin-position new-row k rest-of-queens)
    (cons  (list k new-row) rest-of-queens))
  (define (safe? k position)
    (define kth-queen (car position))
    ;(display "\r\nsafe:")
    ;(display k)
    ;(display position)
    ;(display kth-queen)
    (define safe-queens 
      (filter (lambda (queen) 
                (cond ((= (car queen) k) true) 
                      ((= (cadr queen) (cadr kth-queen)) false)
                      ((= (abs (- (cadr queen) (cadr kth-queen))) 
                          (abs (- k (car queen)))) 
                       false)                      
                      (else true)))
              position))
   ; (display "safe-queens:")
   ; (display safe-queens)
    (= (length safe-queens) k))
  (define (queen-cols k)    
    (if (= k 0)
        (list empty-board)
        (filter
         (lambda (positions) (safe? k positions))
         (flatmap
          (lambda (rest-of-queens)
            (map (lambda (new-row)
                   (adjoin-position new-row k rest-of-queens))
                 (enumerate-interval 1 board-size)))
          (queen-cols (- k 1))))))
  (queen-cols board-size))
(display "\r\n(queen 1):\r\n")
(queens 1)
(display "\r\n(queen 2):\r\n")
(queens 2)
(display "\r\n(queen 3):\r\n")
(queens 3)
(display "\r\n(queen 4):\r\n")
(queens 4)
(display "\r\n(queen 5):\r\n")
(queens 5)
(display "\r\n(queen 6):\r\n")
(queens 6)
(display "\r\n(queen 7):\r\n")
(queens 7)
(display "\r\n(queen 8):\r\n")
(queens 8)
"====Ex2.43"
;递归时，(queen-cols (- k 1))重复计算了多次
                 