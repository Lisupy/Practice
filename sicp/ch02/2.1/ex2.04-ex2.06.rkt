"====Ex2.04"
(define (my-cons x y)
  (lambda (m) (m x y)))
(define (my-car z)
  (z (lambda (p q) p)))
(define (my-cdr z)
  (z (lambda (p q) q)))
(car (cons 1 2))
(cdr (cons 1 2))

"====Ex2.05"
(define (pow x p)
  (if (= p 0)
      1
      (* x (pow x (- p 1)))))
(define (arith-cons x y)
  (* (pow 2 x) (pow 3 y)))
(define (get-x t k)
    (if (= (remainder t k) 0)
        (+ 1 (get-x (/ t k) k))
        0))
(define (arith-car z)  
  (get-x z 2))
(define (arith-cdr z)
  (get-x z 3))
(arith-cons 10 30)
(arith-car (arith-cons 10 30))
(arith-cdr (arith-cons 10 32))
"====Ex2.06"
(define zero (lambda (f) (lambda (x) x)))
(define (add-1 n)
  (lambda (f) (lambda (x) (f ((n f) x)))))
(define one (lambda (f) (lambda (x) (f x))))
(define two (lambda (f) (lambda (x) (f (f x)))))
;(define (add a b) (a b))
(define (add2 n)
  (* n 2))
((zero add1) 2)
(((add-1 zero) add1) 2)
((one add1) 2)
(define (inc x) (+ x 1))
((one inc) 0)
;(((add one two) inc) 0)
"http://sicp.org.ua/sicp/Exercise2-6"
(define (add-church-numerals m n)
  (lambda (f) (lambda (x) ((m f) ((n f) x)))))