"====Ex2.02"
(define (make-point x y)
  (cons x y))
(define (x-point point)
  (car point))
(define (y-point point)
  (cdr point))
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ".")
  (display (y-point p))
  (display ")"))
(define (make-segment start end)
  (cons start end))
(define (start-segment segment)
  (car segment))
(define (end-segment segment)
  (cdr segment))
(define (midpoint-segment segment)
  (define (mid x y)
    (/ (+ x y) 2))
  (let ((start-point (start-segment segment))
        (end-point (end-segment segment)))
    (make-point (mid (x-point start-point)
                     (x-point end-point))
                (mid (y-point start-point)
                     (y-point end-point)))))
(print-point (midpoint-segment (make-segment (make-point 10 20) 
                                             (make-point 20 10))))
(define (square x) (* x x))
(define (length-segment segment)
  (let ((start-point (start-segment segment))
        (end-point (end-segment segment)))
    (sqrt (+ (square (- (x-point start-point)
                        (x-point end-point)))
             (square (- (y-point start-point)
                        (y-point end-point)))))))
                     
"====Ex2.03"
(define (make-rectangle segment width)
  (cons segment width))
(define (segment-rectangle rect)
  (car rect))
(define (width-rectangle rect)
  (cdr rect))
(define (area-rectangle rect)
  (* (length-segment (segment-rectangle rect))
     (width-rectangle rect)))
(define (length-rectangle rect)
  (* 2 (+ (length-segment (segment-rectangle rect))
          (width-rectangle rect))))
(define rect (make-rectangle (make-segment (make-point 10 20) (make-point -10 -20))
                                           5))
(area-rectangle rect)
(length-rectangle rect)

"http://sicp.org.ua/sicp/Exercise2-3"
(define (make-rectangle2 segment alpha) 
  (let ((width (* (tan alpha) 
                  (length-segment segment))))
    (make-rectangle segment width)))